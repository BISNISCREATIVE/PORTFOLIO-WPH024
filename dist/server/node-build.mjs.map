{"version":3,"file":"node-build.mjs","sources":["../../server/routes/demo.ts","../../server/services/emailService.ts","../../server/routes/contact.ts","../../server/index.ts","../../server/node-build.ts"],"sourcesContent":["import { RequestHandler } from \"express\";\nimport { DemoResponse } from \"@shared/api\";\n\nexport const handleDemo: RequestHandler = (req, res) => {\n  const response: DemoResponse = {\n    message: \"Hello from Express server\",\n  };\n  res.status(200).json(response);\n};\n","import \"dotenv/config\";\r\nimport * as nodemailer from 'nodemailer';\r\n\r\n// Email configuration\r\nconst emailConfig = {\r\n  host: 'smtp.padin.my.id',\r\n  port: 465,\r\n  secure: true, // true for 465, false for other ports\r\n  auth: {\r\n    user: 'admin@padin.my.id',\r\n    pass: process.env.EMAIL_PASSWORD || '', // Set this in environment variables\r\n  },\r\n};\r\n\r\n// Log configuration for debugging\r\nconsole.log('Email configuration loaded:');\r\nconsole.log('Host:', emailConfig.host);\r\nconsole.log('Port:', emailConfig.port);\r\nconsole.log('User:', emailConfig.auth.user);\r\nconsole.log('Password set:', !!emailConfig.auth.pass);\r\nconsole.log('Password length:', emailConfig.auth.pass.length);\r\n\r\n// Create transporter\r\nconst transporter = nodemailer.createTransport(emailConfig);\r\n\r\n// Email interface\r\nexport interface ContactEmail {\r\n  name: string;\r\n  email: string;\r\n  message: string;\r\n}\r\n\r\n// Send contact form email\r\nexport async function sendContactEmail(contactData: ContactEmail): Promise<boolean> {\r\n  try {\r\n    const mailOptions = {\r\n      from: 'admin@padin.my.id',\r\n      to: 'admin@padin.my.id', // You can change this to forward to another email\r\n      subject: `New Contact Form Message from ${contactData.name}`,\r\n      html: `\r\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\r\n          <h2 style=\"color: #3A0764;\">New Contact Form Message</h2>\r\n          <div style=\"background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;\">\r\n            <h3 style=\"color: #333; margin-top: 0;\">Contact Details:</h3>\r\n            <p><strong>Name:</strong> ${contactData.name}</p>\r\n            <p><strong>Email:</strong> ${contactData.email}</p>\r\n            <p><strong>Message:</strong></p>\r\n            <div style=\"background-color: white; padding: 15px; border-radius: 5px; border-left: 4px solid #3A0764;\">\r\n              ${contactData.message.replace(/\\n/g, '<br>')}\r\n            </div>\r\n          </div>\r\n          <div style=\"text-align: center; color: #666; font-size: 12px;\">\r\n            <p>This message was sent from your portfolio contact form.</p>\r\n            <p>Time: ${new Date().toLocaleString()}</p>\r\n          </div>\r\n        </div>\r\n      `,\r\n      text: `\r\nNew Contact Form Message\r\n\r\nName: ${contactData.name}\r\nEmail: ${contactData.email}\r\nMessage: ${contactData.message}\r\n\r\nTime: ${new Date().toLocaleString()}\r\n      `,\r\n    };\r\n\r\n    await transporter.sendMail(mailOptions);\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error sending email:', error);\r\n    return false;\r\n  }\r\n}\r\n\r\n// Verify email configuration\r\nexport async function verifyEmailConfig(): Promise<boolean> {\r\n  try {\r\n    await transporter.verify();\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Email configuration verification failed:', error);\r\n    return false;\r\n  }\r\n} ","import { Request, Response } from 'express';\r\nimport { sendContactEmail, ContactEmail } from '../services/emailService';\r\n\r\nexport async function handleContact(req: Request, res: Response) {\r\n  try {\r\n    const { name, email, message }: ContactEmail = req.body;\r\n\r\n    // Validation\r\n    if (!name || !email || !message) {\r\n      return res.status(400).json({\r\n        success: false,\r\n        message: 'Name, email, and message are required',\r\n      });\r\n    }\r\n\r\n    // Basic email validation\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    if (!emailRegex.test(email)) {\r\n      return res.status(400).json({\r\n        success: false,\r\n        message: 'Please provide a valid email address',\r\n      });\r\n    }\r\n\r\n    // Send email\r\n    const emailSent = await sendContactEmail({ name, email, message });\r\n\r\n    if (emailSent) {\r\n      res.status(200).json({\r\n        success: true,\r\n        message: 'Message sent successfully! I will get back to you soon.',\r\n      });\r\n    } else {\r\n      res.status(500).json({\r\n        success: false,\r\n        message: 'Failed to send message. Please try again later.',\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.error('Contact form error:', error);\r\n    res.status(500).json({\r\n      success: false,\r\n      message: 'Internal server error. Please try again later.',\r\n    });\r\n  }\r\n} ","import \"dotenv/config\";\nimport express from \"express\";\nimport cors from \"cors\";\nimport { handleDemo } from \"./routes/demo\";\nimport { handleContact } from \"./routes/contact\";\n\nexport function createServer() {\n  const app = express();\n\n  // Middleware\n  app.use(cors());\n  app.use(express.json());\n  app.use(express.urlencoded({ extended: true }));\n\n  // Example API routes\n  app.get(\"/api/ping\", (_req, res) => {\n    const ping = process.env.PING_MESSAGE ?? \"ping\";\n    res.json({ message: ping });\n  });\n\n  app.get(\"/api/demo\", handleDemo);\n  app.post(\"/api/contact\", handleContact);\n\n  return app;\n}\n","import path from \"path\";\nimport { createServer } from \"./index\";\nimport * as express from \"express\";\n\nconst app = createServer();\nconst port = process.env.PORT || 3000;\n\n// In production, serve the built SPA files\nconst __dirname = import.meta.dirname;\nconst distPath = path.join(__dirname, \"../spa\");\n\n// Serve static files\napp.use(express.static(distPath));\n\n// Handle React Router - serve index.html for all non-API routes\napp.get(\"*\", (req, res) => {\n  // Don't serve index.html for API routes\n  if (req.path.startsWith(\"/api/\") || req.path.startsWith(\"/health\")) {\n    return res.status(404).json({ error: \"API endpoint not found\" });\n  }\n\n  res.sendFile(path.join(distPath, \"index.html\"));\n});\n\napp.listen(port, () => {\n  console.log(`ðŸš€ Fusion Starter server running on port ${port}`);\n  console.log(`ðŸ“± Frontend: http://localhost:${port}`);\n  console.log(`ðŸ”§ API: http://localhost:${port}/api`);\n});\n\n// Graceful shutdown\nprocess.on(\"SIGTERM\", () => {\n  console.log(\"ðŸ›‘ Received SIGTERM, shutting down gracefully\");\n  process.exit(0);\n});\n\nprocess.on(\"SIGINT\", () => {\n  console.log(\"ðŸ›‘ Received SIGINT, shutting down gracefully\");\n  process.exit(0);\n});\n"],"names":["app","express"],"mappings":"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"}